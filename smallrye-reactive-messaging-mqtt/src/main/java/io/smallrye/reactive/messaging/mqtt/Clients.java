package io.smallrye.reactive.messaging.mqtt;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import javax.net.ssl.TrustManagerFactory;

import com.hivemq.client.mqtt.mqtt3.Mqtt3BlockingClient;
import com.hivemq.client.mqtt.mqtt3.Mqtt3Client;
import com.hivemq.client.mqtt.mqtt3.Mqtt3ClientBuilder;
import com.hivemq.client.mqtt.mqtt3.Mqtt3RxClient;
import com.hivemq.client.mqtt.mqtt3.message.connect.connack.Mqtt3ConnAck;
import com.hivemq.client.mqtt.mqtt3.message.publish.Mqtt3Publish;

import io.reactivex.Flowable;
import io.reactivex.Single;
import io.smallrye.mutiny.Multi;
import io.smallrye.mutiny.Uni;
import io.smallrye.mutiny.converters.uni.UniRxConverters;
import io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;

public class Clients {

    private static final Map<String, ClientHolder> clients = new ConcurrentHashMap<>();

    private Clients() {
        // avoid direct instantiation.
    }

    static Uni<Mqtt3RxClient> getConnectedClient(MqttConnectorCommonConfiguration options) {

        ClientHolder holder = getHolder(options);

        return holder.connect();
    }

    static ClientHolder getHolder(MqttConnectorCommonConfiguration options) {

        String host = options.getHost();
        int def = options.getSsl() ? 8883 : 1883;
        int port = options.getPort().orElse(def);
        String server = options.getServerName().orElse("");
        String clientId = options.getClientId().orElse("");

        String id = keyForClient(host, port, server, clientId);

        return clients.computeIfAbsent(id, key -> {
            Mqtt3RxClient client = create(host, port, options);
            return new ClientHolder(client, host, port, server);
        });
    }

    private static String keyForClient(String host, int port, String server, String clientId) {
        return host + port + "<" + server + ">-[" + clientId + "]";
    }

    static Mqtt3RxClient create(String brokerHost, int brokerPort, MqttConnectorCommonConfiguration options) {

        final Mqtt3ClientBuilder builder = Mqtt3Client.builder()
                .serverHost(brokerHost)
                .serverPort(brokerPort);

        if (options.getAutoGeneratedClientId()) {
            builder.identifier(UUID.randomUUID().toString());
        }
        options.getClientId().ifPresent(clientid -> builder.identifier(clientid));

        options.getUsername().ifPresent(username -> {
            builder.simpleAuth()
                    .username(username)
                    .password(options.getPassword().orElseThrow(
                            () -> new IllegalArgumentException("password null with authentication enabled (username not null)"))
                            .getBytes())
                    .applySimpleAuth();
        });

        if (options.getSsl()) {
            builder.sslConfig().trustManagerFactory(createSelfSignedTrustManagerFactory("")).applySslConfig();
        }

        return builder
                .automaticReconnectWithDefaultConfig()
                .addConnectedListener(context -> {
                    System.err.println("connected...");
                }).buildRx();
    }

    /**
     * Removed all the stored clients.
     */
    public static void clear() {
        clients.forEach((name, holder) -> holder.close());
        clients.clear();
    }

    public static class ClientHolder {

        private final Mqtt3RxClient client;
        private final Uni<Mqtt3ConnAck> connection;
        private final BroadcastProcessor<Mqtt3Publish> messages;

        public ClientHolder(Mqtt3RxClient client, String host, int port, String server) {
            this.client = client;
            final Single<Mqtt3ConnAck> connect = client.connect();
            this.connection = Uni.createFrom().converter(UniRxConverters.fromSingle(), client.connect()).memoize()
                    .indefinitely();
            messages = BroadcastProcessor.create();

            client.publish(Flowable.fromPublisher(messages));
            client.disconnect().andThen(messages);
            connect.doOnError(t -> messages.onError(t));
            //connect.doOnTerminate( () --> messages.onComplete());
        }

        public Uni<Mqtt3RxClient> connect() {
            return connection
                    .map(ignored -> client);
        }

        public void close() {
            final Mqtt3BlockingClient mqtt3BlockingClient = client.toBlocking();
            if (mqtt3BlockingClient.getState().isConnected()) {
                mqtt3BlockingClient.disconnect();
            }
        }

        public Multi<Mqtt3Publish> stream() {
            return messages;
        }
    }

    public static TrustManagerFactory createSelfSignedTrustManagerFactory(String selfSignedTrustManager) {
        try {
            // Add support for self-signed (local) SSL certificates
            // Based on http://developer.android.com/training/articles/security-ssl.html#UnknownCa

            // Load CAs from an InputStream
            // (could be from a resource or ByteArrayInputStream or ...)
            CertificateFactory cf = CertificateFactory.getInstance("X.509");
            // From https://www.washington.edu/itconnect/security/ca/load-der.crt
            InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(selfSignedTrustManager);
            Certificate ca;
            try (InputStream caInput = new BufferedInputStream(is)) {
                ca = cf.generateCertificate(caInput);
            }

            // Create a KeyStore containing our trusted CAs
            String keyStoreType = KeyStore.getDefaultType();
            KeyStore keyStore = KeyStore.getInstance(keyStoreType);
            keyStore.load(null, null);
            keyStore.setCertificateEntry("ca", ca);

            // Create a TrustManager that trusts the CAs in our KeyStore
            String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();
            TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);
            tmf.init(keyStore);

            return tmf;
        } catch (CertificateException | IOException | KeyStoreException | NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
}
