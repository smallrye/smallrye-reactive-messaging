[
    {
        "extension": "revapi.java",
        "id": "java",
        "configuration": {
            "missing-classes": {
                "behavior": "report",
                "ignoreMissingAnnotations": false
            }
        }
    },
    {
        "extension": "revapi.filter",
        "configuration": {
            "elements": {
                "include": [
                    {
                        "matcher": "java-package",
                        "match": "io.smallrye.reactive.messaging.kafka"
                    }
                ]
            }
        }
    },
    {
        "extension": "revapi.differences",
        "id": "breaking-changes",
        "configuration": {
            "criticality": "highlight",
            "minSeverity": "POTENTIALLY_BREAKING",
            "minCriticality": "documented",
            "differences": [
                {
                    "code": "java.method.numberOfParametersChanged",
                    "old": "method void io.smallrye.reactive.messaging.kafka.IncomingKafkaRecordBatch<K, T>::<init>(org.apache.kafka.clients.consumer.ConsumerRecords<K, T>, io.smallrye.reactive.messaging.kafka.commit.KafkaCommitHandler, io.smallrye.reactive.messaging.kafka.fault.KafkaFailureHandler, boolean, boolean)",
                    "new": "method void io.smallrye.reactive.messaging.kafka.IncomingKafkaRecordBatch<K, T>::<init>(org.apache.kafka.clients.consumer.ConsumerRecords<K, T>, java.lang.String, io.smallrye.reactive.messaging.kafka.commit.KafkaCommitHandler, io.smallrye.reactive.messaging.kafka.fault.KafkaFailureHandler, boolean, boolean)",
                    "justification": "Batch record receives channel name in constructor to include it in metadata"
                },
                {
                    "code": "java.method.numberOfParametersChanged",
                    "old": "method void io.smallrye.reactive.messaging.kafka.IncomingKafkaRecord<K, T>::<init>(org.apache.kafka.clients.consumer.ConsumerRecord<K, T>, io.smallrye.reactive.messaging.kafka.commit.KafkaCommitHandler, io.smallrye.reactive.messaging.kafka.fault.KafkaFailureHandler, boolean, boolean)",
                    "new": "method void io.smallrye.reactive.messaging.kafka.IncomingKafkaRecord<K, T>::<init>(org.apache.kafka.clients.consumer.ConsumerRecord<K, T>, java.lang.String, io.smallrye.reactive.messaging.kafka.commit.KafkaCommitHandler, io.smallrye.reactive.messaging.kafka.fault.KafkaFailureHandler, boolean, boolean)",
                    "justification": "Record receives channel name in constructor to include it in metadata"
                },
                {
                    "code": "java.method.numberOfParametersChanged",
                    "old": "method void io.smallrye.reactive.messaging.kafka.IncomingKafkaRecordMetadata<K, T>::<init>(org.apache.kafka.clients.consumer.ConsumerRecord<K, T>)",
                    "new": "method void io.smallrye.reactive.messaging.kafka.IncomingKafkaRecordMetadata<K, T>::<init>(org.apache.kafka.clients.consumer.ConsumerRecord<K, T>, java.lang.String)",
                    "justification": "Record receives channel name in constructor to include it in metadata"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method io.smallrye.mutiny.Uni<org.apache.kafka.clients.consumer.ConsumerGroupMetadata> io.smallrye.reactive.messaging.kafka.KafkaConsumer<K, V>::consumerGroupMetadata()",
                    "justification": "Returns consumer group metadata"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method io.smallrye.mutiny.Uni<java.lang.Void> io.smallrye.reactive.messaging.kafka.KafkaConsumer<K, V>::resetToLastCommittedPositions()",
                    "justification": "Resets consumer to last committed position"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method io.smallrye.mutiny.Uni<java.lang.Void> io.smallrye.reactive.messaging.kafka.KafkaProducer<K, V>::abortTransaction()",
                    "justification": "Call abort transaction on underlying producer"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method io.smallrye.mutiny.Uni<java.lang.Void> io.smallrye.reactive.messaging.kafka.KafkaProducer<K, V>::beginTransaction()",
                    "justification": "Call begin transaction on underlying producer"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method io.smallrye.mutiny.Uni<java.lang.Void> io.smallrye.reactive.messaging.kafka.KafkaProducer<K, V>::commitTransaction()",
                    "justification": "Call commit transaction on underlying producer"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method io.smallrye.mutiny.Uni<java.lang.Void> io.smallrye.reactive.messaging.kafka.KafkaProducer<K, V>::initTransactions()",
                    "justification": "Call init transaction on underlying producer"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method io.smallrye.mutiny.Uni<java.lang.Void> io.smallrye.reactive.messaging.kafka.KafkaProducer<K, V>::sendOffsetsToTransaction(java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.kafka.clients.consumer.OffsetAndMetadata>, org.apache.kafka.clients.consumer.ConsumerGroupMetadata)",
                    "justification": "Call sendOffsetsToTransaction transaction on underlying producer"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method io.smallrye.mutiny.Uni<java.lang.Void> io.smallrye.reactive.messaging.kafka.KafkaProducer<K, V>::withTransaction(java.util.function.Consumer<io.smallrye.mutiny.subscription.MultiEmitter<? super org.apache.kafka.clients.producer.ProducerRecord<K, V>>>)",
                    "justification": "Adds method to produce records in transaction"
                }
            ]
        }
    },
    {
        "extension": "revapi.reporter.json",
        "configuration": {
            "minSeverity": "POTENTIALLY_BREAKING",
            "minCriticality": "documented",
            "output": "target/compatibility.json",
            "indent": true,
            "append": false,
            "keepEmptyFile": true
        }
    },
    {
        "extension": "revapi.reporter.text",
        "configuration": {
            "minSeverity": "POTENTIALLY_BREAKING",
            "minCriticality": "documented",
            "output": "out"
        }
    }
]
